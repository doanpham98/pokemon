{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","selected","setSelected","pokeImg","point","pokemons","setPokemons","mostVote","React","useMemo","console","log","pointArr","map","pokemon","max","Math","find","className","src","alt","onClick","indexOf","vote","newSelected","floor","random","length","Boolean","window","location","hostname","match","rootElement","document","getElementById","hasChildNodes","ReactDOM","hydrate","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+OAkDeA,MA/Cf,WAAgB,IAAD,EACgBC,mBAAS,GADzB,mBACRC,EADQ,KACCC,EADD,OAEiBF,mBAAS,CACvC,CAACG,QAAS,uDAAwDC,MAAO,GACzE,CAACD,QAAS,uDAAwDC,MAAO,GACzE,CAACD,QAAS,uDAAwDC,MAAO,GACzE,CAACD,QAAS,uDAAwDC,MAAO,GACzE,CAACD,QAAS,uDAAwDC,MAAO,KAP5D,mBAERC,EAFQ,KAEEC,EAFF,KASNC,EAAUC,IAAMC,SAAQ,WAC7BC,QAAQC,IAAI,WACZ,IAAIC,EAASP,EAASQ,KAAI,SAAAC,GAAO,OAAEA,EAAQV,SACvCW,EAAKC,KAAKD,IAAL,MAAAC,KAAI,YAAQJ,IACrB,OAAOP,EAASY,MAAK,SAAAH,GAAO,OAAEA,EAAQV,QAAQW,OAC7C,CAACV,IAaJ,OACE,yBAAKa,UAAU,OACb,kDACF,yBAAKA,UAAU,WACf,yBAAKC,IAAKd,EAASJ,GAAUE,QAASiB,IAAI,YAC1C,yCAAef,EAASJ,GAAUG,QAEhC,4BAAQiB,QAAS,kBAbV,SAACpB,GACRK,EAAYD,EAASQ,KAAI,SAAAC,GAAO,OAChCT,EAASiB,QAAQR,KAAWb,EAA5B,2BACIa,GADJ,IACYV,MAAMU,EAAQV,MAAM,IAAGU,MAUdS,CAAKtB,KAA1B,QACA,4BAAQoB,QApBI,WACd,IAAMG,EAAcR,KAAKS,MAAMT,KAAKU,SAASrB,EAASsB,QACtDzB,EAAYsB,IAAcvB,EAASuB,EACjCA,IAAcvB,GAAUuB,IAAcnB,EAASsB,OAAO,EAAEH,EAAY,EACpEA,EAAY,KAgBZ,gBACF,yBAAKN,UAAU,WACZ,sDAGA,yBAAKC,IAAKZ,EAASJ,QAASiB,IAAI,YAC9B,yCAAeb,EAASH,UChCbwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAAcC,SAASC,eAAe,QACxCF,EAAYG,gBACdC,IAASC,QAAQ,kBAAC,EAAD,MAASL,GAE1BI,IAASE,OAAO,kBAAC,EAAD,MAASN,GDyHrB,kBAAmBO,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,a","file":"static/js/main.e849a509.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\nconst [selected,setSelected] = useState(0);\nconst [pokemons, setPokemons] = useState([\n  {pokeImg: 'http://pngimg.com/uploads/pokemon/pokemon_PNG108.png', point: 0},\n  {pokeImg: 'http://pngimg.com/uploads/pokemon/pokemon_PNG118.png', point: 0},\n  {pokeImg: 'http://pngimg.com/uploads/pokemon/pokemon_PNG128.png', point: 0},\n  {pokeImg: 'http://pngimg.com/uploads/pokemon/pokemon_PNG138.png', point: 0},\n  {pokeImg: 'http://pngimg.com/uploads/pokemon/pokemon_PNG158.png', point: 0}\n])\n   const mostVote= React.useMemo(()=>{\n    console.log('dÃ¢ta');\n    let pointArr=pokemons.map(pokemon=>pokemon.point);\n    let max= Math.max(...pointArr);\n    return pokemons.find(pokemon=>pokemon.point===max);\n   },[pokemons])\n   const random = ()=>{\n    const newSelected = Math.floor(Math.random()*pokemons.length);\n    setSelected(newSelected!==selected?newSelected:\n      newSelected===selected&&newSelected===pokemons.length-1?newSelected-1:\n      newSelected+1);\n  }\n  const vote=(selected)=>{\n      setPokemons(pokemons.map(pokemon=>\n      pokemons.indexOf(pokemon)===selected?\n      {...pokemon,point:pokemon.point+1}:pokemon\n      ))\n  }\n  return (\n    <div className=\"App\">\n      <h1>pokemon of the day</h1>\n    <div className=\"img-box\">\n    <img src={pokemons[selected].pokeImg} alt=\"pokemon\"/>\n    <h2>has voted {pokemons[selected].point}</h2>\n    </div>\n      <button onClick={()=>vote(selected)}>Vote</button>\n      <button onClick={random}>Next pokemon</button>\n    <div className=\"img-box\">\n       <h1>\n         pokemon with most vote\n       </h1>\n       <img src={mostVote.pokeImg} alt=\"pokemon\"/>\n         <h2>has voted {mostVote.point}</h2>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement.hasChildNodes()) {\n  ReactDOM.hydrate(<App />, rootElement);\n} else {\n  ReactDOM.render(<App />, rootElement);\n}\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}